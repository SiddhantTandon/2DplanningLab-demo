// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: state_message.proto

#include "state_message.pb.h"
#include "state_message.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace state_message {

static const char* ShareStateService_method_names[] = {
  "/state_message.ShareStateService/ShareState",
};

std::unique_ptr< ShareStateService::Stub> ShareStateService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ShareStateService::Stub> stub(new ShareStateService::Stub(channel, options));
  return stub;
}

ShareStateService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_ShareState_(ShareStateService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::ClientReaderWriter< ::state_message::AgentMessage, ::state_message::MapMessage>* ShareStateService::Stub::ShareStateRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::state_message::AgentMessage, ::state_message::MapMessage>::Create(channel_.get(), rpcmethod_ShareState_, context);
}

void ShareStateService::Stub::async::ShareState(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::state_message::AgentMessage,::state_message::MapMessage>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::state_message::AgentMessage,::state_message::MapMessage>::Create(stub_->channel_.get(), stub_->rpcmethod_ShareState_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::state_message::AgentMessage, ::state_message::MapMessage>* ShareStateService::Stub::AsyncShareStateRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::state_message::AgentMessage, ::state_message::MapMessage>::Create(channel_.get(), cq, rpcmethod_ShareState_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::state_message::AgentMessage, ::state_message::MapMessage>* ShareStateService::Stub::PrepareAsyncShareStateRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::state_message::AgentMessage, ::state_message::MapMessage>::Create(channel_.get(), cq, rpcmethod_ShareState_, context, false, nullptr);
}

ShareStateService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ShareStateService_method_names[0],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< ShareStateService::Service, ::state_message::AgentMessage, ::state_message::MapMessage>(
          [](ShareStateService::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::state_message::MapMessage,
             ::state_message::AgentMessage>* stream) {
               return service->ShareState(ctx, stream);
             }, this)));
}

ShareStateService::Service::~Service() {
}

::grpc::Status ShareStateService::Service::ShareState(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::state_message::MapMessage, ::state_message::AgentMessage>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace state_message

